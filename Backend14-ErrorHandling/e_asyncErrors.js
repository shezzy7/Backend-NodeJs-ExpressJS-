// let express = require("express");
// let app = express();
// let mongoose =  require("mongoose");
// let ErrorHandling = require("./ErrorHandling.js");
// app.use(express.urlencoded({extended:true}));

// app.listen(8080,()=>{
//     console.log("App is listening on port number : 8080")
// })


// let chatSchema = new mongoose.Schema({
//     name : {
//         type : String
//     },
//     age : {
//         type : Number
//     }
// })
// async function main(){

//     await mongoose.connect("mongodb://127.0.0.1:27017/fakewhatsapp");
// }
// main().then(()=>{
//     console.log("Database connected successfully");
// })
// let Chat =  mongoose.model("Chat" , chatSchema);

// // let chat1 = new Chat({
// //     name : "shezzy",
// //     age : 22
// // })
// // chat1.save().then((res)=>{
// //     console.log(res);
// // })

// //for non async functions if our express gets some error then it calls next method by default which tries to find an error handling middleware and takes over to this.
// // //But in case of async functions express don't call next method by default mean if some error occurs in an async method(api) then it will not look for a error handling middleware it will simply give an error of server crashing.
// //So foor sending errors with async funtion we need to call next function in which pass error as an argument.

// app.get("/chat/:id" , async (req,res,next)=>{

//         let {id} = req.params;
//         console.log(id);
//         let chat =await Chat.findById(id);
//         if(!chat){
//               next(new ErrorHandling(401,"Chat not found"));
//         }
//         res.send(chat);
// })
// app.use((err,req,res,next)=>{
//     let {status=404 , message="some error occured"} = err;
//     res.status(status).send(message);
// })
// app.get("/" , (req,res)=>{
//     res.send("Root route");
// })

let express = require("express");
let app = express();
let mongoose = require("mongoose");
let ErrorHandling = require("./c_ErrorHandling.js");

app.use(express.urlencoded({ extended: true }));

// Database connection
async function main() {

    await mongoose.connect("mongodb://127.0.0.1:27017/fakewhatsapp");
    console.log("Database connected successfully");

}
main();

app.listen(8080, () => {
    console.log("App is listening on port number: 8080");
});

// Define Chat schema and model
let chatSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
    },
    age: {
        type: Number,
        required: true,
        min: 0,
    },
});
let Chat = mongoose.model("Chat", chatSchema);

// Routes
// app.get("/chat/:id", async (req, res, next) => {

 
//         let { id } = req.params;
//         console.log(id);

//         let chat = await Chat.findById(id);
//         if (!chat) {//this condition will be true when there will be a valid id according to constraints and there is no  data present in database containing this id.
//             //But if we pass invalid id mean an id which does not follow constraints mean whose length is greater then max-length or someother constraint error then in this case it will also give us error but this error will be generated by mongoose in this case this our code will hit error before hitting this if statement.So to handle these kind of errors we need to insert our code in try catch block to handle error
//             return next(new ErrorHandling(401, "Chat not found"));
//         }
//         res.send(chat);
    
// });
// Routes
app.get("/chat/:id", async (req, res, next) => {

        try{
        let { id } = req.params;
        console.log(id);

        let chat = await Chat.findById(id);
        if (!chat) {
            return next(new ErrorHandling(401, "Chat not found"));
        }
        res.send(chat);
    }
    catch(err){
        next(err);
        //if we pass invalid id like "67617d3e240c3fac00e7ebc5llolo" then it will give us error like -> Cast to ObjectId failed for value "67617d3e240c3fac00e7ebc5llolo" (type string) at path "_id" for model "Chat"
        //This error mean our mongoose cannot convert/cast this given id into such a form that he can understand or he is unable to read it
    }
    
});


app.get("/", (req, res) => {
    res.send("Root route");
});

// Error-handling middleware
app.use((err, req, res, next) => {
    let { status = 404, message = "Some error occurred" } = err;
    res.status(status).send(message);
});